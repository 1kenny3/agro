#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ê–≥—Ä–æ–ø–∞–π–ø–ª–∞–π–Ω API
"""

import requests
import json
from pathlib import Path
from PIL import Image
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            health_data = response.json()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {health_data['status']}")
            print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {health_data['device']}")
            print(f"üß† –ú–æ–¥–µ–ª–∏: {health_data['models']}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return False
    
    return True

def create_sample_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∑–µ–ª–µ–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è)
    img = Image.new('RGB', (400, 400), color='green')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='JPEG')
    img_buffer.seek(0)
    
    return img_buffer

def test_classification():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä"""
    print("\nüåæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä...")
    
    img_buffer = create_sample_image()
    
    files = {'file': ('test_crop.jpg', img_buffer, 'image/jpeg')}
    
    try:
        response = requests.post(f"{API_BASE_URL}/classify", files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {result['predicted_class_ru']}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
            print(f"üéØ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {'–î–∞' if result['is_confident'] else '–ù–µ—Ç'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            print(response.text)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

def test_quality_assessment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
    
    img_buffer = create_sample_image()
    
    files = {'file': ('test_crop.jpg', img_buffer, 'image/jpeg')}
    
    try:
        response = requests.post(f"{API_BASE_URL}/quality", files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"‚≠ê –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {result['overall_score']:.1f}/5.0 ({result['overall_quality']})")
            print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ: {'–ó–¥–æ—Ä–æ–≤–æ–µ' if result['is_healthy'] else '–ë–æ–ª–µ–∑–Ω—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞'}")
            print(f"ü¶† –ë–æ–ª–µ–∑–Ω–∏: {result['disease']['predicted_class_ru']}")
            print(f"üå± –ó—Ä–µ–ª–æ—Å—Ç—å: {result['maturity']['predicted_class_ru']}")
            
            if result['recommendations']:
                print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for i, rec in enumerate(result['recommendations'], 1):
                    print(f"   {i}. {rec}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {response.status_code}")
            print(response.text)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")

def test_yield_prediction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏...")
    
    img_buffer = create_sample_image()
    
    files = {'file': ('test_crop.jpg', img_buffer, 'image/jpeg')}
    
    try:
        response = requests.post(f"{API_BASE_URL}/yield", files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑: {result['predicted_yield_tons_per_ha']:.2f} —Ç/–≥–∞")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
            
            pred_range = result['prediction_range']
            print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω: {pred_range['lower']:.1f} - {pred_range['upper']:.1f} —Ç/–≥–∞")
            
            if result['recommendations']:
                print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for i, rec in enumerate(result['recommendations'], 1):
                    print(f"   {i}. {rec}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏: {response.status_code}")
            print(response.text)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏: {e}")

def test_comprehensive_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    img_buffer = create_sample_image()
    
    files = {'file': ('test_crop.jpg', img_buffer, 'image/jpeg')}
    
    try:
        response = requests.post(f"{API_BASE_URL}/analyze", files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            crop_result = result['crop_classification']
            print(f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {crop_result['predicted_class_ru']} ({crop_result['confidence']:.1%})")
            
            # –ö–∞—á–µ—Å—Ç–≤–æ
            quality_result = result['quality_assessment']
            print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality_result['overall_score']:.1f}/5.0")
            print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ: {'–ó–¥–æ—Ä–æ–≤–æ–µ' if quality_result['is_healthy'] else '–ë–æ–ª–µ–∑–Ω—å'}")
            
            # –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
            yield_result = result['yield_prediction']
            print(f"üìä –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: {yield_result['predicted_yield_tons_per_ha']:.2f} —Ç/–≥–∞")
            
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if result['comprehensive_recommendations']:
                print("\nüéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for i, rec in enumerate(result['comprehensive_recommendations'], 1):
                    print(f"   {i}. {rec}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
            print(response.text)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üåæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ê–≥—Ä–æ–ø–∞–π–ø–ª–∞–π–Ω API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
    if not test_api_health():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python run_api.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_classification()
    test_quality_assessment() 
    test_yield_prediction()
    test_comprehensive_analysis()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üåê –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python run_frontend.py")

if __name__ == "__main__":
    main() 