#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–ª—å—Ç—É—Ä
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from pathlib import Path
from test_trained_model import TrainedModelPredictor
import json

def demo_model_capabilities():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–£–ß–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ö–£–õ–¨–¢–£–†")
    print("üåæ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö")
    print("=" * 75)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
    predictor = TrainedModelPredictor()
    
    if predictor.model is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python train_improved_model.py")
        return
    
    print("\nüöÄ –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ú–û–î–ï–õ–ò:")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä")
    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Ü–≤–µ—Ç, —Ç–µ–∫—Å—Ç—É—Ä–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)")
    print("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø—à–µ–Ω–∏—Ü–∞, —è—á–º–µ–Ω—å, –∫—É–∫—É—Ä—É–∑–∞")
    print("‚úÖ –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    print("‚úÖ –û–±—É—á–µ–Ω–∞ –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö!")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    with open("photo_analysis_results.json", 'r', encoding='utf-8') as f:
        analysis_results = json.load(f)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    print("\nüì∏ –ü–†–ò–ú–ï–†–´ –†–ê–ë–û–¢–´ –ú–û–î–ï–õ–ò –ù–ê –í–ê–®–ò–• –§–û–¢–û–ì–†–ê–§–ò–Ø–•:")
    print("=" * 60)
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    examples = [
        "DJI_0046.JPG",
        "wheat-field-1347275.jpg", 
        "—Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π-–ª—É–≥-–ø—à–µ–Ω–∏—Ü—ã-–ø–æ—Å–∞–∂–µ–Ω–Ω—ã–π-–≤–µ—Å–Ω–æ–π-–≤–∏–¥-—Å-–≤–æ–∑–¥—É—Ö–∞-–Ω–∞-372329048.jpg.webp",
        "DJI_0045.JPG"
    ]
    
    for i, filename in enumerate(examples, 1):
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
        photo_path = None
        original_result = None
        
        for result in analysis_results:
            if result['file_info']['name'] == filename:
                photo_path = result['file_info']['path']
                original_result = result
                break
        
        if not photo_path or not Path(photo_path).exists():
            continue
            
        print(f"\nüñºÔ∏è –ü–†–ò–ú–ï–† {i}: {filename}")
        print("-" * 50)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        prediction = predictor.predict(photo_path)
        
        if prediction:
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
            print(f"   üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {prediction['predicted_class_ru']}")
            print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.1%}")
            
            print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–´–ï –í–ï–†–û–Ø–¢–ù–û–°–¢–ò:")
            class_names_ru = {'wheat': '–ø—à–µ–Ω–∏—Ü–∞', 'corn': '–∫—É–∫—É—Ä—É–∑–∞', 'barley': '—è—á–º–µ–Ω—å'}
            for class_name, prob in sorted(prediction['probabilities'].items(), key=lambda x: x[1], reverse=True):
                class_ru = class_names_ru.get(class_name, class_name)
                bar_length = int(prob * 20)  # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
                print(f"   {class_ru:8} ‚îÇ{bar}‚îÇ {prob:.1%}")
            
            print(f"\nüîç –í–ò–ó–£–ê–õ–¨–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò:")
            features = prediction['visual_features']
            print(f"   üü¢ –ó–µ–ª–µ–Ω—ã–π –ø–æ–∫—Ä–æ–≤:      {features['green_ratio']:.3f}")
            print(f"   üü° –ñ–µ–ª—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏:      {features['yellow_ratio']:.3f}")
            print(f"   üìè –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏:  {features['vertical_lines']:.3f}")
            print(f"   üî≤ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫—Ä–∞–µ–≤:     {features['edge_density']:.3f}")
            print(f"   üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:  {features['aspect_ratio']:.3f}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π
            if original_result:
                manual_class = original_result['manual_identification']['class_ru']
                old_ml_class = original_result['ml_prediction']['class_ru']
                
                print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï:")
                print(f"   üë®‚Äçüåæ –†—É—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:     {manual_class}")
                print(f"   ü§ñ –°—Ç–∞—Ä–∞—è –ò–ò —Å–∏—Å—Ç–µ–º–∞:  {old_ml_class}")
                print(f"   üéØ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:   {prediction['predicted_class_ru']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                manual_match = prediction['predicted_class'] == original_result['manual_identification']['class']
                old_match = prediction['predicted_class_ru'] == old_ml_class
                
                if manual_match and not old_match:
                    print("   ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ç–æ—á–Ω–µ–µ —Å—Ç–∞—Ä–æ–π!")
                elif manual_match and old_match:
                    print("   ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –°–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏")
                elif not manual_match and old_match:
                    print("   ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò:")
    print("=" * 40)
    print(f"üìÅ –û–±—É—á–µ–Ω–∞ –Ω–∞: 16 –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö")
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: 84.2% (16/19 –ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: +27.1% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    print(f"üèÜ –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: 75.0%")
    print(f"üíæ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ~51 –ú–ë")
    
    print(f"\nüéì –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò:")
    print(f"   ‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –≤–∞—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    print(f"   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —É—Å–ª–æ–≤–∏–π —Å—ä–µ–º–∫–∏ (–¥—Ä–æ–Ω, –æ—Å–≤–µ—â–µ–Ω–∏–µ)")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫—É–ª—å—Ç—É—Ä")
    print(f"   ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ø—à–µ–Ω–∏—Ü—ã –∏ —è—á–º–µ–Ω—è")

def interactive_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print(f"\nüéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 40)
    
    photo_dir = Path("photo")
    image_files = [f for f in photo_dir.iterdir() 
                   if f.is_file() and f.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']]
    
    if not image_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    predictor = TrainedModelPredictor()
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    
    for i, img_file in enumerate(image_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        size_mb = img_file.stat().st_size / 1024 / 1024
        print(f"   {i:2}. {img_file.name} ({size_mb:.1f} –ú–ë)")
    
    try:
        choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-{min(10, len(image_files))}) –∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–∞: ")
        
        if choice.strip():
            idx = int(choice) - 1
            if 0 <= idx < len(image_files):
                selected_image = image_files[idx]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                selected_image = image_files[0]
        else:
            selected_image = image_files[0]
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {selected_image.name}")
        print("-" * 50)
        
        result = predictor.predict(selected_image)
        
        if result:
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['predicted_class_ru']}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
            
            print(f"\nüìà –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
            class_names_ru = {'wheat': '–ø—à–µ–Ω–∏—Ü–∞', 'corn': '–∫—É–∫—É—Ä—É–∑–∞', 'barley': '—è—á–º–µ–Ω—å'}
            for class_name, prob in result['probabilities'].items():
                class_ru = class_names_ru.get(class_name, class_name)
                print(f"   {class_ru}: {prob:.1%}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
    except (ValueError, KeyboardInterrupt):
        print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        demo_model_capabilities()
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å
        interactive_demo()
        
        print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"üìö –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ: –û–¢–ß–ï–¢_–û–ë–£–ß–ï–ù–ò–Ø_–ú–û–î–ï–õ–ò.md")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc() 