#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
–≤ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
"""

import requests
import io
from PIL import Image, ImageDraw
import time

API_BASE_URL = "http://localhost:8000"

def create_test_corn_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–∫—É—Ä—É–∑—ã"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    image = Image.new('RGB', (512, 768), color='lightblue')  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
    draw = ImageDraw.Draw(image)
    
    # –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–µ–±–ª–∏
    for x in range(50, 450, 40):
        # –°—Ç–µ–±–µ–ª—å
        draw.rectangle([x, 200, x+15, 700], fill='darkgreen')
        # –õ–∏—Å—Ç—å—è (—à–∏—Ä–æ–∫–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã)
        for y in range(250, 650, 80):
            # –õ–µ–≤—ã–π –ª–∏—Å—Ç
            draw.polygon([
                (x-30, y), (x, y+10), (x, y+60), (x-25, y+50)
            ], fill='green')
            # –ü—Ä–∞–≤—ã–π –ª–∏—Å—Ç
            draw.polygon([
                (x+45, y), (x+15, y+10), (x+15, y+60), (x+40, y+50)
            ], fill='green')
    
    # –†–∏—Å—É–µ–º –º–µ—Ç–µ–ª–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –∫—É–∫—É—Ä—É–∑—ã)
    for x in range(60, 440, 40):
        for y in range(50, 150, 20):
            draw.ellipse([x-5, y, x+25, y+15], fill='yellow')
            draw.ellipse([x-3, y+2, x+23, y+13], fill='brown')
    
    return image

def test_endpoint(endpoint_url, image, test_name):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
    print(f"üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint_url}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    try:
        files = {'file': ('test_corn.png', img_byte_arr, 'image/png')}
        response = requests.post(endpoint_url, files=files)
        
        if response.status_code == 200:
            result = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if 'crop_classification' in result:
                # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                crop_result = result['crop_classification']
                classification_result = {
                    'predicted_class': crop_result.get('predicted_class'),
                    'predicted_class_ru': crop_result.get('predicted_class_ru'),
                    'confidence': crop_result.get('confidence'),
                    'analysis_notes': crop_result.get('analysis_notes', [])
                }
            else:
                # –û–±—ã—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                classification_result = {
                    'predicted_class': result.get('predicted_class'),
                    'predicted_class_ru': result.get('predicted_class_ru'),
                    'confidence': result.get('confidence'),
                    'analysis_notes': result.get('analysis_notes', [])
                }
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç")
            print(f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {classification_result['predicted_class_ru']}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {classification_result['confidence']:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
            if classification_result['analysis_notes']:
                key_notes = [note for note in classification_result['analysis_notes'][:3]]
                print("üìù –ó–∞–º–µ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:")
                for note in key_notes:
                    print(f"   ‚Ä¢ {note}")
            
            return classification_result
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return None

def compare_results(result1, result2, name1, name2):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–≤—É—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {name1} vs {name2}")
    print("=" * 60)
    
    if not result1 or not result2:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å - –æ–¥–∏–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    class_match = result1['predicted_class'] == result2['predicted_class']
    class_ru_match = result1['predicted_class_ru'] == result2['predicted_class_ru']
    
    # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–æ 5%)
    confidence_diff = abs(result1['confidence'] - result2['confidence'])
    confidence_similar = confidence_diff <= 0.05
    
    print(f"üåæ –ö–ª–∞—Å—Å –∫—É–ª—å—Ç—É—Ä—ã: {'‚úÖ' if class_match else '‚ùå'}")
    print(f"   {name1}: {result1['predicted_class']} ({result1['predicted_class_ru']})")
    print(f"   {name2}: {result2['predicted_class']} ({result2['predicted_class_ru']})")
    
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {'‚úÖ' if confidence_similar else '‚ùå'}")
    print(f"   {name1}: {result1['confidence']:.3f}")
    print(f"   {name2}: {result2['confidence']:.3f}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞: {confidence_diff:.3f}")
    
    overall_match = class_match and class_ru_match and confidence_similar
    
    if overall_match:
        print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ì–õ–ê–°–û–í–ê–ù–´!")
    else:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û –†–ê–°–•–û–ñ–î–ï–ù–ò–ï!")
    
    return overall_match

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("–≤ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö API")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–∫—É—Ä—É–∑—ã
    print("\nüåΩ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–∫—É—Ä—É–∑—ã...")
    test_image = create_test_corn_image()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints = [
        (f"{API_BASE_URL}/classify", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã"),
        (f"{API_BASE_URL}/analyze", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"),
        (f"{API_BASE_URL}/analyze/comprehensive", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    ]
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    for endpoint_url, test_name in endpoints:
        result = test_endpoint(endpoint_url, test_image, test_name)
        results[test_name] = result
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ø–∞—Ä–Ω–æ
    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò")
    print("=" * 60)
    
    all_consistent = True
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    match1 = compare_results(
        results["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã"], 
        results["–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    )
    all_consistent = all_consistent and match1
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    match2 = compare_results(
        results["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã"], 
        results["–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    )
    all_consistent = all_consistent and match2
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–≤–∞ —Ç–∏–ø–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    match3 = compare_results(
        results["–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"], 
        results["–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    )
    all_consistent = all_consistent and match3
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    
    if all_consistent:
        print("üéâ –í–°–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–ê–Æ–¢ –°–û–ì–õ–ê–°–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´!")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –ò–°–ü–†–ê–í–õ–ï–ù–ê")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –í –†–ï–ó–£–õ–¨–¢–ê–¢–ê–•")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    return all_consistent

if __name__ == "__main__":
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python run_api.py")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    input()
    
    success = main()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù!") 