#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä
—Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
"""

import sys
import os
from pathlib import Path
from PIL import Image
import json
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_new_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–ê")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        from src.models.crop_classifier import SmartCropClassifier
        
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
        classifier = SmartCropClassifier(prefer_advanced=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ
        info = classifier.get_classifier_info()
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ:")
        print(f"   –¢–∏–ø: {info['type']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {info['device']}")
        print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω: {info['available_advanced']}")
        
        # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_images_dir = project_root / "photo"
        if not test_images_dir.exists():
            print(f"\n‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_images_dir}")
            print("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from PIL import ImageDraw
            test_img = Image.new('RGB', (224, 224), color='green')
            draw = ImageDraw.Draw(test_img)
            draw.text((50, 100), "TEST CROP", fill='white')
            
            test_images_dir.mkdir(exist_ok=True)
            test_path = test_images_dir / "test_crop.jpg"
            test_img.save(test_path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_path}")
            
            test_images = [test_path]
        else:
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ
            image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
            test_images = []
            for ext in image_extensions:
                test_images.extend(test_images_dir.glob(f"*{ext}"))
                test_images.extend(test_images_dir.glob(f"*{ext.upper()}"))
            
            if not test_images:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {test_images_dir}")
                return
        
        print(f"\nüñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        for i, image_path in enumerate(test_images[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"\n{'='*50}")
            print(f"üîç –¢–ï–°–¢ {i+1}: {image_path.name}")
            print(f"{'='*50}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(image_path)
                print(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.size}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
                print("üß† –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...")
                result = classifier.predict(image)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
                print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {result['predicted_class_ru']} ({result['predicted_class']})")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f} ({result['confidence_level']})")
                print(f"   –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {'‚úÖ –î–∞' if result['is_confident'] else '‚ùå –ù–µ—Ç'}")
                
                print(f"\nüìä –í–ï–†–û–Ø–¢–ù–û–°–¢–ò:")
                for class_ru, prob in result['probabilities_ru'].items():
                    print(f"   {class_ru}: {prob:.3f} ({prob*100:.1f}%)")
                
                print(f"\nüìù –ê–ù–ê–õ–ò–ó:")
                for note in result['analysis_notes']:
                    print(f"   ‚Ä¢ {note}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                if 'morphology_analysis' in result and result['morphology_analysis']:
                    morph = result['morphology_analysis']
                    print(f"\nüî¨ –ú–û–†–§–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
                    print(f"   –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–∏: {morph.get('green_intensity', 0):.3f}")
                    print(f"   –¢–µ–∫—Å—Ç—É—Ä–∞: {morph.get('texture_variance', 0):.1f}")
                    print(f"   –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏: {morph.get('vertical_lines', 0):.3f}")
                    print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {morph.get('avg_aspect_ratio', 0):.2f}")
                
                if 'model_results' in result and result['model_results']:
                    print(f"\nü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ï–õ–ï–ô:")
                    for model_name, probs in result['model_results'].items():
                        if isinstance(probs, (list, np.ndarray)) and len(probs) > 0:
                            max_prob = float(np.max(probs))
                            print(f"   {model_name}: {max_prob:.3f}")
                        else:
                            print(f"   {model_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path.name}: {e}")
                continue
        
        print(f"\n{'='*60}")
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üéØ –ù–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("pip install torch torchvision timm transformers opencv-python")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def compare_classifiers():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–û–í")
    print("=" * 40)
    
    try:
        from src.models.crop_classifier import SmartCropClassifier, ImprovedCropClassifier
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        from PIL import ImageDraw
        test_img = Image.new('RGB', (224, 224), color='lightgreen')
        draw = ImageDraw.Draw(test_img)
        draw.rectangle([50, 50, 174, 174], fill='darkgreen')
        draw.text((80, 100), "CORN", fill='yellow')
        
        print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–∫—É—Ä—É–∑—ã")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
        advanced_classifier = SmartCropClassifier(prefer_advanced=True)
        advanced_result = advanced_classifier.predict(test_img)
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {advanced_result['predicted_class_ru']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {advanced_result['confidence']:.3f}")
        print(f"   –¢–∏–ø: {advanced_result.get('classifier_type', 'Unknown')}")
        
        # –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
        improved_classifier = ImprovedCropClassifier()
        improved_result = improved_classifier.predict(test_img)
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {improved_result['predicted_class_ru']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {improved_result['confidence']:.3f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: {advanced_result['predicted_class_ru']} ({advanced_result['confidence']:.3f})")
        print(f"   –£–ª—É—á—à–µ–Ω–Ω—ã–π:  {improved_result['predicted_class_ru']} ({improved_result['confidence']:.3f})")
        
        if advanced_result['confidence'] > improved_result['confidence']:
            print("üèÜ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        elif improved_result['confidence'] > advanced_result['confidence']:
            print("üèÜ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        else:
            print("ü§ù –û–±–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üåæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ù–ï–ô–†–û–ù–ù–´–• –°–ï–¢–ï–ô –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ö–£–õ–¨–¢–£–†")
    print("üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: Swin Transformer, Vision Transformer, EfficientNetV2")
    print()
    
    test_new_classifier()
    compare_classifiers()
    
    print(f"\n{'='*60}")
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –≤ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: SmartCropClassifier –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å") 