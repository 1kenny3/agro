import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import io
import base64
from typing import Dict, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–≥—Ä–æ–ø–∞–π–ø–ª–∞–π–Ω - –ê–Ω–∞–ª–∏–∑ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #4CAF50, #8BC34A);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
    }
    
    .metric-container {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #4CAF50;
        margin: 0.5rem 0;
    }
    
    .recommendation-box {
        background: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2196F3;
        margin: 1rem 0;
    }
    
    .success-box {
        background: #e8f5e8;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #4CAF50;
        margin: 1rem 0;
    }
    
    .warning-box {
        background: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #FFC107;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #f8d7da;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #DC3545;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"

# @st.cache_data  # –û–¢–ö–õ–Æ–ß–ê–ï–ú –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
def call_api(analysis_type: str, image_file) -> Dict:
    """–í—ã–∑–æ–≤ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        endpoint_map = {
            "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": "analyze",
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã": "classify", 
            "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞": "quality",
            "–ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏": "yield"
        }
        
        endpoint = endpoint_map.get(analysis_type)
        if not endpoint:
            return {
                "success": False,
                "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
                "detail": f"–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ '{analysis_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
        image_file.seek(0)
        file_bytes = image_file.read()
        image_file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if len(file_bytes) == 0:
            return {
                "success": False,
                "error": "–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª",
                "detail": "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            Image.open(io.BytesIO(file_bytes)).verify()
        except Exception as img_error:
            return {
                "success": False,
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "detail": f"–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {str(img_error)}"
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            "file": (
                image_file.name, 
                file_bytes, 
                f"image/{image_file.name.split('.')[-1].lower()}"
            )
        }
        
        response = requests.post(
            f"{API_BASE_URL}/{endpoint}", 
            files=files,
            timeout=30  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É
            try:
                error_detail = response.json()
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ API: {response.status_code}",
                    "detail": error_detail.get("detail", response.text)
                }
            except:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ API: {response.status_code}",
                    "detail": response.text
                }
                
    except requests.exceptions.Timeout:
        return {
            "success": False,
            "error": "–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞",
            "detail": "–°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
    except requests.exceptions.ConnectionError:
        return {
            "success": False,
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            "detail": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000"
        }
    except Exception as e:
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API",
            "detail": str(e)
        }

def display_image_info(image: Image.Image):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–®–∏—Ä–∏–Ω–∞", f"{image.width} px")
    
    with col2:
        st.metric("–í—ã—Å–æ—Ç–∞", f"{image.height} px")
    
    with col3:
        st.metric("–§–æ—Ä–º–∞—Ç", image.format or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

def display_classification_results(result: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not result.get("success", False):
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h4>
            <p><strong>–û—à–∏–±–∫–∞:</strong> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>
            <p><strong>–î–µ—Ç–∞–ª–∏:</strong> {result.get('detail', '')}</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    confidence = result.get("confidence", 0)
    predicted_class_ru = result.get("predicted_class_ru", "")
    is_confident = result.get("is_confident", False)
    
    col1, col2 = st.columns(2)
    
    with col1:
        confidence_color = "success" if is_confident else "warning"
        st.markdown(f"""
        <div class="{confidence_color}-box">
            <h3>üåæ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞</h3>
            <h2>{predicted_class_ru}</h2>
            <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {confidence:.1%}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        probabilities_ru = result.get("probabilities_ru", {})
        if probabilities_ru:
            fig = px.bar(
                x=list(probabilities_ru.values()),
                y=list(probabilities_ru.keys()),
                orientation='h',
                title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤",
                labels={'x': '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', 'y': '–ö—É–ª—å—Ç—É—Ä–∞'}
            )
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)

def display_quality_results(result: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    if not result.get("success", False):
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
            <p><strong>–û—à–∏–±–∫–∞:</strong> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>
            <p><strong>–î–µ—Ç–∞–ª–∏:</strong> {result.get('detail', '')}</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    overall_score = result.get("overall_score", 0)
    overall_quality = result.get("overall_quality", "")
    is_healthy = result.get("is_healthy", False)
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{overall_score:.1f}/5.0", f"{overall_quality}")
    
    with col2:
        health_emoji = "üü¢" if is_healthy else "üî¥"
        health_text = "–ó–¥–æ—Ä–æ–≤–æ–µ" if is_healthy else "–ë–æ–ª–µ–∑–Ω—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        st.metric("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", health_text, health_emoji)
    
    with col3:
        quality_data = result.get("quality", {})
        quality_class = quality_data.get("predicted_class_ru", "")
        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", quality_class)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–ª–µ–∑–Ω—è—Ö
        disease_data = result.get("disease", {})
        disease_class = disease_data.get("predicted_class_ru", "")
        disease_confidence = disease_data.get("confidence", 0)
        
        st.markdown(f"""
        <div class="metric-container">
            <h4>ü¶† –ê–Ω–∞–ª–∏–∑ –±–æ–ª–µ–∑–Ω–µ–π</h4>
            <p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> {disease_class}</p>
            <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {disease_confidence:.1%}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑—Ä–µ–ª–æ—Å—Ç–∏
        maturity_data = result.get("maturity", {})
        maturity_class = maturity_data.get("predicted_class_ru", "")
        maturity_confidence = maturity_data.get("confidence", 0)
        
        st.markdown(f"""
        <div class="metric-container">
            <h4>üå± –°—Ç–∞–¥–∏—è –∑—Ä–µ–ª–æ—Å—Ç–∏</h4>
            <p><strong>–°—Ç–∞–¥–∏—è:</strong> {maturity_class}</p>
            <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {maturity_confidence:.1%}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = result.get("recommendations", [])
    if recommendations:
        st.markdown("### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for i, rec in enumerate(recommendations, 1):
            st.markdown(f"""
            <div class="recommendation-box">
                <strong>{i}.</strong> {rec}
            </div>
            """, unsafe_allow_html=True)

def display_yield_results(result: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"""
    if not result.get("success", False):
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏</h4>
            <p><strong>–û—à–∏–±–∫–∞:</strong> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>
            <p><strong>–î–µ—Ç–∞–ª–∏:</strong> {result.get('detail', '')}</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    predicted_yield = result.get("predicted_yield_tons_per_ha", 0)
    confidence = result.get("confidence", 0)
    prediction_range = result.get("prediction_range", {})
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å", 
            f"{predicted_yield:.2f} —Ç/–≥–∞",
            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}"
        )
    
    with col2:
        lower = prediction_range.get("lower", 0)
        upper = prediction_range.get("upper", 0)
        st.metric(
            "–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞", 
            f"{lower:.1f} - {upper:.1f} —Ç/–≥–∞",
            f"¬±{(upper-lower)/2:.1f} —Ç/–≥–∞"
        )
    
    with col3:
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        if confidence >= 0.8:
            quality_text = "–í—ã—Å–æ–∫–æ–µ"
            quality_color = "üü¢"
        elif confidence >= 0.6:
            quality_text = "–°—Ä–µ–¥–Ω–µ–µ"
            quality_color = "üü°"
        else:
            quality_text = "–ù–∏–∑–∫–æ–µ"
            quality_color = "üî¥"
        
        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞", quality_text, quality_color)
    
    # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=[lower, predicted_yield, upper],
        y=[1, 1, 1],
        mode='markers+lines',
        marker=dict(size=[8, 12, 8], color=['red', 'green', 'red']),
        line=dict(color='blue', width=2),
        name='–ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏'
    ))
    
    fig.update_layout(
        title="–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏",
        xaxis_title="–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)",
        yaxis=dict(visible=False),
        height=200,
        showlegend=False
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = result.get("recommendations", [])
    if recommendations:
        st.markdown("### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
        for i, rec in enumerate(recommendations, 1):
            st.markdown(f"""
            <div class="recommendation-box">
                <strong>{i}.</strong> {rec}
            </div>
            """, unsafe_allow_html=True)

def display_comprehensive_results(result: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if not result.get("success", False):
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</h4>
            <p><strong>–û—à–∏–±–∫–∞:</strong> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>
            <p><strong>–î–µ—Ç–∞–ª–∏:</strong> {result.get('detail', '')}</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    crop_result = result.get("crop_classification", {})
    quality_result = result.get("quality_assessment", {})
    yield_result = result.get("yield_prediction", {})
    comprehensive_recommendations = result.get("comprehensive_recommendations", [])
    
    # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("## üìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        crop_class = crop_result.get("predicted_class_ru", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        st.metric("–ö—É–ª—å—Ç—É—Ä–∞", crop_class)
    
    with col2:
        overall_score = quality_result.get("overall_score", 0)
        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", f"{overall_score:.1f}/5.0")
    
    with col3:
        predicted_yield = yield_result.get("predicted_yield_tons_per_ha", 0)
        st.metric("–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å", f"{predicted_yield:.1f} —Ç/–≥–∞")
    
    with col4:
        is_healthy = quality_result.get("is_healthy", False)
        health_status = "–ó–¥–æ—Ä–æ–≤–æ–µ" if is_healthy else "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        health_emoji = "üü¢" if is_healthy else "üî¥"
        st.metric("–ó–¥–æ—Ä–æ–≤—å–µ", health_status, health_emoji)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–∞—Ö
    tab1, tab2, tab3 = st.tabs(["üåæ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "üîç –ö–∞—á–µ—Å—Ç–≤–æ", "üìà –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å"])
    
    with tab1:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        classification_response = {
            "success": True,
            **crop_result
        }
        display_classification_results(classification_response)
    
    with tab2:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        quality_response = {
            "success": True,
            **quality_result
        }
        display_quality_results(quality_response)
    
    with tab3:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
        yield_response = {
            "success": True,
            **yield_result
        }
        display_yield_results(yield_response)
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if comprehensive_recommendations:
        st.markdown("## üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for i, rec in enumerate(comprehensive_recommendations, 1):
            st.markdown(f"""
            <div class="recommendation-box">
                <strong>{i}.</strong> {rec}
            </div>
            """, unsafe_allow_html=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="main-header">
        <h1>üåæ –ê–≥—Ä–æ–ø–∞–π–ø–ª–∞–π–Ω</h1>
        <h3>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        analysis_type = st.selectbox(
            "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
            ["–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã", "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "–ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
        st.markdown("---")
        
        st.markdown("""
        ### üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã
        3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        4. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        ### üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        - JPG, JPEG
        - PNG
        - BMP, TIFF
        
        ### üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—É–ª—å—Ç—É—Ä—ã
        - üåæ –ü—à–µ–Ω–∏—Ü–∞
        - üåæ –Ø—á–º–µ–Ω—å  
        - üåΩ –ö—É–∫—É—Ä—É–∑–∞
        """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã",
        type=['jpg', 'jpeg', 'png', 'bmp', 'tiff'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã"
    )
    
    if uploaded_file is not None:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2 = st.columns([1, 2])
        
        with col1:
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            st.markdown("### üìè –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
            display_image_info(image)
        
        with col2:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."):
                    # –í—ã–∑—ã–≤–∞–µ–º API
                    result = call_api(analysis_type, uploaded_file)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.markdown("---")
                    st.header(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {analysis_type}")
                    
                    if analysis_type == "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                        display_comprehensive_results(result)
                    elif analysis_type == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã":
                        display_classification_results(result)
                    elif analysis_type == "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞":
                        display_quality_results(result)
                    elif analysis_type == "–ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏":
                        display_yield_results(result)
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        st.markdown("---")
        st.header("üéØ –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div class="success-box">
                <h4>üåæ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
                <p>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—É–ª—å—Ç—É—Ä—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é >90%</p>
                <ul>
                    <li>–ü—à–µ–Ω–∏—Ü–∞</li>
                    <li>–Ø—á–º–µ–Ω—å</li>
                    <li>–ö—É–∫—É—Ä—É–∑–∞</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="success-box">
                <h4>üîç –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
                <p>–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞—Å—Ç–µ–Ω–∏–π</p>
                <ul>
                    <li>–ë–æ–ª–µ–∑–Ω–∏</li>
                    <li>–ó—Ä–µ–ª–æ—Å—Ç—å</li>
                    <li>–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="success-box">
                <h4>üìà –ü—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏</h4>
                <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –≤ —Ç/–≥–∞</p>
                <ul>
                    <li>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–π</li>
                    <li>–ó–¥–æ—Ä–æ–≤—å–µ –∫—É–ª—å—Ç—É—Ä—ã</li>
                    <li>–°—Ç–∞–¥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 