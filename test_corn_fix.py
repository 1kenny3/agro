#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from PIL import Image
import numpy as np
from src.models.crop_classifier import ImprovedCropClassifier
from src.config.settings import settings

def test_corn_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã"""
    
    print("üåΩ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    classifier = ImprovedCropClassifier()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è –∫—É–∫—É—Ä—É–∑—ã)
    print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–∫—É—Ä—É–∑—ã...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∫—É–∫—É—Ä—É–∑—ã
    width, height = 224, 336  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∫–∞–∫ —É –∫—É–∫—É—Ä—É–∑—ã
    test_image = np.zeros((height, width, 3), dtype=np.uint8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–ª–∏—Å—Ç—å—è)
    test_image[50:height-20, :, 1] = 120  # –ó–µ–ª–µ–Ω—ã–π –∫–∞–Ω–∞–ª
    test_image[50:height-20, :, 0] = 40   # –ö—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª
    test_image[50:height-20, :, 2] = 60   # –°–∏–Ω–∏–π –∫–∞–Ω–∞–ª
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∂–µ–ª—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É (–º–µ—Ç–µ–ª–∫–∏)
    test_image[0:50, :, 0] = 180  # –ö—Ä–∞—Å–Ω—ã–π
    test_image[0:50, :, 1] = 160  # –ó–µ–ª–µ–Ω—ã–π
    test_image[0:50, :, 2] = 80   # –°–∏–Ω–∏–π
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã (—Å—Ç–µ–±–ª–∏)
    for x in range(0, width, 15):
        test_image[50:height-20, x:x+3, :] = [60, 140, 40]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
    pil_image = Image.fromarray(test_image)
    
    print("üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫—É–∫—É—Ä—É–∑—ã
    corn_features = classifier._analyze_corn_features(pil_image)
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for key, value in corn_features.items():
        if isinstance(value, float):
            print(f"   {key}: {value:.3f}")
        else:
            print(f"   {key}: {value}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    result = classifier.predict(pil_image)
    
    print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {result['predicted_class']} ({result['predicted_class_ru']})")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
    print(f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {result['confidence_level']}")
    print(f"–£–≤–µ—Ä–µ–Ω –ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {result['is_confident']}")
    
    print("\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
    for cls, prob in result['probabilities_ru'].items():
        print(f"   {cls}: {prob:.3f}")
    
    print("\n–ó–∞–º–µ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:")
    for note in result['analysis_notes']:
        print(f"   ‚Ä¢ {note}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É–∫—É—Ä—É–∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    if result['predicted_class'] == 'corn':
        print("\n‚úÖ –£–°–ü–ï–•: –ö—É–∫—É—Ä—É–∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞!")
    else:
        print(f"\n‚ùå –ù–ï–£–î–ê–ß–ê: –û–∂–∏–¥–∞–ª–∞—Å—å –∫—É–∫—É—Ä—É–∑–∞, –ø–æ–ª—É—á–µ–Ω–æ {result['predicted_class']}")
    
    return result

def test_with_existing_models():
    """–¢–µ—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    print("\n" + "="*60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–∫—É—Ä—É–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        test_image = Image.new('RGB', (224, 300), color=(80, 120, 60))
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–º–µ—Ç–µ–ª–∫–∏" —Å–≤–µ—Ä—Ö—É
        for y in range(0, 50):
            for x in range(0, 224):
                test_image.putpixel((x, y), (180, 160, 80))
        
        classifier = ImprovedCropClassifier()
        result = classifier.predict(test_image)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['predicted_class_ru']}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
        print(f"–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω: {'corn_analysis' in result}")
        
        if 'corn_analysis' in result:
            corn_score = result['corn_analysis'].get('corn_score', 0)
            print(f"–°—á–µ—Ç –∫—É–∫—É—Ä—É–∑—ã: {corn_score:.3f}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã")
    print("–¶–µ–ª—å: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–æ–≥–¥–∞ –∫—É–∫—É—Ä—É–∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —è—á–º–µ–Ω—å")
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        result = test_corn_classification()
        
        # –¢–µ—Å—Ç —Å –º–æ–¥–µ–ª—è–º–∏
        test_with_existing_models()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc() 