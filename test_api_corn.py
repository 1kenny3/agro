#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã
"""

import requests
import io
from PIL import Image
import numpy as np
import json

def create_corn_test_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–∫—É—Ä—É–∑—ã"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∫—É–∫—É—Ä—É–∑—ã
    width, height = 224, 336  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    test_image = np.zeros((height, width, 3), dtype=np.uint8)
    
    # –ó–µ–ª–µ–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–ª–∏—Å—Ç—å—è –∫—É–∫—É—Ä—É–∑—ã)
    test_image[50:height-20, :, 1] = 120  
    test_image[50:height-20, :, 0] = 40   
    test_image[50:height-20, :, 2] = 60   
    
    # –ñ–µ–ª—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É (–º–µ—Ç–µ–ª–∫–∏)
    test_image[0:50, :, 0] = 180  
    test_image[0:50, :, 1] = 160  
    test_image[0:50, :, 2] = 80   
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã (—Å—Ç–µ–±–ª–∏)
    for x in range(0, width, 15):
        test_image[50:height-20, x:x+3, :] = [60, 140, 40]
    
    return Image.fromarray(test_image)

def test_api_classification():
    """–¢–µ—Å—Ç API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üåΩ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = create_corn_test_image()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BytesIO
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
        
        files = {'file': ('test_corn.png', img_byte_arr, 'image/png')}
        response = requests.post('http://localhost:8000/classify', files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {result.get('predicted_class')} ({result.get('predicted_class_ru')})")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.3f}")
            print(f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {result.get('confidence_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            
            print("\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
            for cls, prob in result.get('probabilities_ru', {}).items():
                print(f"   {cls}: {prob:.3f}")
            
            print("\n–ó–∞–º–µ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:")
            for note in result.get('analysis_notes', []):
                print(f"   ‚Ä¢ {note}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –∫—É–∫—É—Ä—É–∑—ã
            if 'corn_analysis' in result:
                corn_analysis = result['corn_analysis']
                print(f"\nüîç –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—É–∫—É—Ä—É–∑—ã:")
                print(f"   –°—á–µ—Ç –∫—É–∫—É—Ä—É–∑—ã: {corn_analysis.get('corn_score', 0):.3f}")
                print(f"   –ú–µ—Ç–µ–ª–∫–∏: {corn_analysis.get('tassel_ratio', 0):.3f}")
                print(f"   –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {corn_analysis.get('vertical_lines', 0):.3f}")
                print(f"   –®–∏—Ä–æ–∫–∏–µ –ª–∏—Å—Ç—å—è: {corn_analysis.get('broad_structure', 0):.3f}")
                print(f"   –ö—É–∫—É—Ä—É–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–∞: {corn_analysis.get('is_corn_likely', False)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('predicted_class') == 'corn':
                print("\nüéâ –£–°–ü–ï–•: API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –∫—É–∫—É—Ä—É–∑—É!")
            else:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–∞—Å—å –∫—É–∫—É—Ä—É–∑–∞, –ø–æ–ª—É—á–µ–Ω–æ {result.get('predicted_class')}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_comprehensive_analysis():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "="*50)
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = create_corn_test_image()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BytesIO
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É...")
        
        files = {'file': ('test_corn.png', img_byte_arr, 'image/png')}
        response = requests.post('http://localhost:8000/analyze', files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä—ã
            crop_result = result.get('crop_classification', {})
            print(f"–ö—É–ª—å—Ç—É—Ä–∞: {crop_result.get('predicted_class_ru', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {crop_result.get('confidence', 0):.3f}")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_result = result.get('quality_assessment', {})
            print(f"–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_result.get('overall_quality', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = result.get('comprehensive_recommendations', [])
            print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   ‚Ä¢ {rec}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—É–∫—É—Ä—É–∑—ã")
    print("–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫—É–∫—É—Ä—É–∑—É")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_api_classification()
    
    # –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    test_comprehensive_analysis()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 